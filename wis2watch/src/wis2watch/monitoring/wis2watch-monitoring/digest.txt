Directory structure:
└── wis2watch-monitoring/
    ├── README.md
    ├── package.json
    ├── vite.config.js
    └── src/
        ├── core.js
        ├── mqtt-monitor-map.js
        ├── components/
        │   └── mqtt-monitoring-map/
        │       ├── App.vue
        │       ├── MapSidebar.vue
        │       └── MQTTMap.vue
        └── composables/
            ├── useMapNodes.js
            └── useWebSocket.js

================================================
FILE: README.md
================================================
# wis2watch-monitoring components

## Project Setup

```sh
npm install
```

### Compile and Hot-Reload for Development

```sh
npm run dev
```

### Compile and Minify for Production

```sh
npm run build
```



================================================
FILE: package.json
================================================
{
  "name": "wis2watch-monitoring",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@primeuix/themes": "^1.2.5",
    "maplibre-gl": "^5.10.0",
    "primeicons": "^7.0.0",
    "primevue": "^4.4.1",
    "vite-plugin-css-injected-by-js": "^3.5.2",
    "vite-plugin-vue-devtools": "^8.0.3",
    "vue": "^3.5.22",
    "vue-i18n": "^11.1.12",
    "vue-plugin-django-utils": "^0.1.6"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^6.0.1",
    "vite": "^7.1.7"
  }
}



================================================
FILE: vite.config.js
================================================
import {fileURLToPath, URL} from 'node:url'
import {resolve} from 'path'

import {defineConfig} from 'vite'
import vue from '@vitejs/plugin-vue'
import vueDevTools from 'vite-plugin-vue-devtools'
import cssInjectedByJsPlugin from "vite-plugin-css-injected-by-js";

// https://vite.dev/config/
export default defineConfig({
    base: '/static/vue/',
    plugins: [
        vue(),
        vueDevTools(),
        cssInjectedByJsPlugin({
            jsAssetsFilterFunction: () => true,
        },),
    ],
    resolve: {
        alias: {
            '@': fileURLToPath(new URL('./src', import.meta.url))
        },
    },
    build: {
        rollupOptions: {
            input: {
                "mqtt-monitor-map": resolve('./src/mqtt-monitor-map.js'),
            },
            output: {
                dir: '../static/vue/',
                entryFileNames: '[name].js',
            },
        },
    },
})


================================================
FILE: src/core.js
================================================
import DjangoUtilsPlugin, {convertDatasetToProps} from "vue-plugin-django-utils";
import {definePreset} from "@primeuix/themes";
import Aura from "@primeuix/themes/aura";
import {createI18n} from "vue-i18n";
import {createApp} from "vue";
import PrimeVue from "primevue/config";
import ToastService from 'primevue/toastservice'
import Tooltip from 'primevue/tooltip'


const WagtailThemePreset = definePreset(Aura, {
    semantic: {
        primary: {
            50: '{teal.50}',
            100: '{teal.100}',
            200: '{teal.200}',
            300: '{teal.300}',
            400: '{teal.400}',
            500: '{teal.700}',
            600: '{teal.800}',
            700: '{teal.700}',
            800: '{teal.800}',
            900: '{teal.900}',
            950: '{teal.950}'
        }
    }
});

export const createWis2WatchApp = (rootElementId, RootComponent) => {
    const el = document.getElementById(rootElementId)

    if (el) {
        const props = convertDatasetToProps({
            dataset: {...el.dataset},
            component: RootComponent
        })

        let defaultLocale = props?.languageCode || 'en'

        const i18n = createI18n({
            legacy: false,
            locale: defaultLocale,
            fallbackLocale: 'en',
        })

        const app = createApp(RootComponent, props)

        app.use(PrimeVue, {
            theme: {
                preset: WagtailThemePreset,
                options: {
                    darkModeSelector: '.w-theme-dark',
                }
            }
        });
        app.use(ToastService)

        app.directive('tooltip', Tooltip)

        app.use(i18n)
        app.use(DjangoUtilsPlugin, {rootElement: el})
        app.mount(el)
    } else {
        console.error(`Element with id ${rootElementId} not found`)
    }
}


================================================
FILE: src/mqtt-monitor-map.js
================================================
import {createWis2WatchApp} from "@/core.js";

import MQTTMonitoringMap from "@/components/mqtt-monitoring-map/App.vue";

createWis2WatchApp("mqtt-monitor-map", MQTTMonitoringMap)


================================================
FILE: src/components/mqtt-monitoring-map/App.vue
================================================
<template>
  <div class="app-container">
    <MapSidebar
        :nodes="filteredNodes"
        :stats="stats"
        :current-filter="currentFilter"
        :selected-node-id="selectedNodeId"
        @filter-change="handleFilterChange"
        @node-select="handleNodeSelect"
    />
    <MQTTMap
        ref="mapRef"
        :nodes-by-country="nodesByCountry"
        :country-coordinates="countryCoordinates"
        :connection-status="connectionStatus"
        :selected-node-id="selectedNodeId"
        @node-click="handleNodeClick"
        @action="handleAction"
    />

    <Toast position="top-right"/>
  </div>
</template>

<script setup>
import {onMounted, ref} from 'vue'
import {useToast} from 'primevue/usetoast'
import MapSidebar from './MapSidebar.vue'
import MQTTMap from './MQTTMap.vue'
import Toast from 'primevue/toast'
import {useWebSocket} from '@/composables/useWebSocket'
import {useMapNodes} from '@/composables/useMapNodes'

import 'primeicons/primeicons.css';


const props = defineProps({
  nodesApiUrl: {
    type: String,
    required: true
  },
  languageCode: {
    type: String,
    required: false,
    default: 'en'
  },
});

const mapRef = ref(null)
const sidebarRef = ref(null)
const sidebarCollapsed = ref(false)
const toast = useToast()

const {connectionStatus, sendMessage, onMessage} = useWebSocket()

const {
  nodesByCountry,
  countryCoordinates,
  selectedNodeId,
  currentFilter,
  stats,
  filteredNodes,
  fetchNodes,
  updateMonitoredNodes,
  setFilter,
  selectNode
} = useMapNodes()

onMounted(async () => {
  await fetchNodes()
})

onMessage((message) => {
  if (message.type === 'status') {
    updateMonitoredNodes(message.data)
  } else if (message.type === 'message') {
    handleMessageReceived(message.data)
  } else if (message.type === 'error') {
    toast.add({
      severity: 'error',
      summary: 'Error',
      detail: message.error,
      life: 5000
    })
  }
})

const handleFilterChange = (filter) => {
  setFilter(filter)
  sendMessage({action: 'get_status'})
}

const handleNodeSelect = (nodeId) => {
  selectNode(nodeId)
}

const handleNodeClick = (nodeId) => {
  selectNode(nodeId)
}

const handleAction = ({action, nodeId}) => {
  sendMessage({action, node_id: nodeId})

  const actionMessages = {
    start: 'Starting monitoring...',
    stop: 'Stopping monitoring...',
    restart: 'Restarting monitoring...'
  }

  toast.add({
    severity: 'info',
    summary: 'Action',
    detail: actionMessages[action] || 'Processing...',
    life: 3000
  })
}

const handleMessageReceived = (data) => {
  if (mapRef.value) {
    mapRef.value.pulseMarker(data.node_id)
    mapRef.value.showNotif(`Message received from ${data.node_name}`)
  }
}
</script>

<style>

.app-container {
  display: flex;
  height: 100vh;
}
</style>


================================================
FILE: src/components/mqtt-monitoring-map/MapSidebar.vue
================================================
<template>
  <div class="w2w-sidebar-wrapper">
    <div class="w2w-sidebar" :class="{ collapsed: isCollapsed }">
      <div class="w2w-sidebar-content">
        <div class="w2w-sidebar-header">
          <div class="header-top">
            <h2>Messages Monitoring</h2>
            <Button
                :icon="isCollapsed ? 'pi pi-chevron-right' : 'pi pi-chevron-left'"
                text
                rounded
                severity="secondary"
                size="small"
                class="collapse-btn"
                @click="toggleSidebar"
            />
          </div>
          <div class="stats-grid">
            <Card v-for="stat in statsData" :key="stat.label" class="stat-card">
              <template #content>
                <div class="stat-label">{{ stat.label }}</div>
                <div class="stat-value">{{ stat.value }}</div>
              </template>
            </Card>
          </div>
        </div>

        <div class="filter-controls">
          <SelectButton
              v-model="selectedFilter"
              :options="filters"
              optionLabel="label"
              optionValue="value"
              @change="$emit('filter-change', selectedFilter)"
          />
        </div>

        <Divider/>

        <div class="node-list">
          <Card
              v-for="node in nodes"
              :key="node.id"
              class="node-card"
              :class="{
              selected: node.id === selectedNodeId,
              active: node.is_monitored && node.is_connected
            }"
              @click="$emit('node-select', node.id)"
          >
            <template #content>
              <div class="node-header">
                <Badge
                    :severity="getNodeSeverity(node)"
                    :value="node.is_monitored ? node.state : 'inactive'"
                />
                <div class="node-info">
                  <div class="node-name">
                    <i class="pi pi-server"></i>
                    {{ node.name }}
                  </div>
                  <div class="node-country">
                    <i class="pi pi-globe"></i>
                    {{ node.country }}
                  </div>
                </div>
              </div>

              <div v-if="node.is_monitored" class="node-stats">
                <Chip :label="`${node.message_count || 0} messages`" icon="pi pi-envelope"/>
                <Chip :label="`${node.subscription_count} subs`" icon="pi pi-rss"/>
              </div>
              <div v-else>
                <Tag severity="secondary" value="Not monitored"/>
              </div>
            </template>
          </Card>
        </div>
      </div>
    </div>
    <Button
        v-if="isCollapsed"
        class="toggle-sidebar-btn"
        :icon="'pi pi-chevron-right'"
        rounded
        size="large"
        @click="toggleSidebar"
        v-tooltip.right="'Show Sidebar'"
    />
  </div>
</template>

<script setup>
import {ref, computed} from 'vue'
import Card from 'primevue/card'
import SelectButton from 'primevue/selectbutton'
import Badge from 'primevue/badge'
import Chip from 'primevue/chip'
import Tag from 'primevue/tag'
import Button from 'primevue/button'
import Divider from 'primevue/divider'

const props = defineProps({
  nodes: {
    type: Array,
    required: true
  },
  stats: {
    type: Object,
    required: true
  },
  currentFilter: {
    type: String,
    default: 'all'
  },
  selectedNodeId: {
    type: Number,
    default: null
  }
})

defineEmits(['filter-change', 'node-select'])

const isCollapsed = ref(false)
const selectedFilter = ref(props.currentFilter)

const filters = [
  {value: 'all', label: 'All'},
  {value: 'connected', label: 'Connected'},
  {value: 'disconnected', label: 'Disconnected'},
  {value: 'inactive', label: 'Inactive'}
]

const statsData = computed(() => [
  {label: 'Total Nodes', value: props.stats.totalNodes},
  {label: 'Connected', value: props.stats.connectedNodes},
  {label: 'Messages', value: props.stats.totalMessages},
  {label: 'Subscriptions', value: props.stats.totalSubscriptions}
])

const getNodeSeverity = (node) => {
  if (!node.is_monitored) return 'secondary'
  if (node.is_connected) return 'success'
  if (node.state === 'connecting') return 'warning'
  return 'danger'
}

const toggleSidebar = () => {
  isCollapsed.value = !isCollapsed.value
}
</script>

<style scoped>
.w2w-sidebar-wrapper {
  position: relative;
  display: flex;
}

.w2w-sidebar {
  width: 380px;
  background: var(--surface-ground);
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: width 0.3s ease, min-width 0.3s ease;
  min-width: 380px;
  flex-shrink: 0;
  position: relative;
  z-index: 100;
}

.w2w-sidebar.collapsed {
  width: 0;
  min-width: 0;
  box-shadow: none;
}

.w2w-sidebar-content {
  width: 380px;
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
}

.w2w-sidebar-header {
  padding: 1.5rem;
  background: var(--primary-color);
  color: var(--primary-color-text);
  flex-shrink: 0;
}

.header-top {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.header-top h2 {
  margin: 0;
  font-size: 1.5rem;
  font-weight: 600;
}

.collapse-btn {
  color: var(--primary-color-text) !important;
}

.collapse-btn:hover {
  background: rgba(255, 255, 255, 0.1) !important;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 0.75rem;
}

.stat-card {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.stat-card :deep(.p-card-body) {
  padding: 0.75rem;
}

.stat-card :deep(.p-card-content) {
  padding: 0;
  text-align: center;
}

.stat-label {
  font-size: 0.75rem;
  opacity: 0.9;
  text-transform: uppercase;
  font-weight: 500;
  color: var(--primary-color-text);
}

.stat-value {
  font-size: 1.75rem;
  font-weight: 700;
  margin-top: 0.25rem;
  color: var(--primary-color-text);
}

.filter-controls {
  padding: 1rem;
  background: var(--surface-50);
  flex-shrink: 0;
}

.filter-controls :deep(.p-selectbutton) {
  width: 100%;
}

.filter-controls :deep(.p-button) {
  flex: 1;
  font-size: 0.75rem;
}

.node-list {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  gap: 0.75rem;
  display: flex;
  flex-direction: column;
}

.node-card {
  cursor: pointer;
  transition: all 0.2s;
  border: 2px solid transparent;
  flex-shrink: 0;
}

.node-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.node-card.active {
  border-color: var(--green-500);
  background: var(--green-50);
}

.node-card.selected {
  border-color: var(--primary-color);
  background: var(--primary-50);
}

.node-card :deep(.p-card-body) {
  padding: 1rem;
}

.node-card :deep(.p-card-content) {
  padding: 0;
}

.node-header {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
  margin-bottom: 0.75rem;
}

.node-info {
  flex: 1;
  min-width: 0;
}

.node-name {
  font-weight: 600;
  font-size: 0.95rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: var(--text-color);
  margin-bottom: 0.25rem;
}

.node-country {
  color: var(--text-color-secondary);
  font-size: 0.85rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.node-stats {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.node-stats :deep(.p-chip) {
  font-size: 0.75rem;
}

/* Toggle button when sidebar is collapsed */
.toggle-sidebar-btn {
  position: absolute;
  left: 20px;
  top: 50%;
  transform: translateY(-50%);
  z-index: 1000;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  animation: pulse-glow 2s infinite;
}

@keyframes pulse-glow {
  0%, 100% {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
  50% {
    box-shadow: 0 4px 20px var(--primary-color);
  }
}
</style>


================================================
FILE: src/components/mqtt-monitoring-map/MQTTMap.vue
================================================
<template>
  <div class="map-container">
    <div ref="mapContainer" class="map"></div>

    <Card class="ws-status">
      <template #content>
        <div class="status-content">
          <Badge
              :severity="statusSeverity"
              :value="statusText"
          >
            <i :class="statusIcon"></i>
          </Badge>
        </div>
      </template>
    </Card>

    <Card class="legend">
      <template #header>
        <div class="legend-title">
          <i class="pi pi-info-circle"></i>
          Node Status
        </div>
      </template>
      <template #content>
        <div class="legend-items">
          <div v-for="item in legendItems" :key="item.label" class="legend-item">
            <Badge :severity="item.severity"/>
            <span>{{ item.label }}</span>
          </div>
        </div>
      </template>
    </Card>

    <transition name="p-message">
      <Message v-if="showNotification" severity="success" :closable="false" class="notification">
        <i class="pi pi-check-circle"></i>
        {{ notificationMessage }}
      </Message>
    </transition>
  </div>
</template>

<script setup>
import {ref, onMounted, watch, computed} from 'vue'
import maplibregl from 'maplibre-gl'
import 'maplibre-gl/dist/maplibre-gl.css'
import Card from 'primevue/card'
import Badge from 'primevue/badge'
import Message from 'primevue/message'

const props = defineProps({
  nodesByCountry: {
    type: Object,
    required: true
  },
  countryCoordinates: {
    type: Object,
    required: true
  },
  connectionStatus: {
    type: String,
    default: 'disconnected'
  },
  selectedNodeId: {
    type: Number,
    default: null
  }
})

const emit = defineEmits(['node-click', 'action'])

const mapContainer = ref(null)
const map = ref(null)
const markers = ref({})
const showNotification = ref(false)
const notificationMessage = ref('')

const legendItems = [
  {label: 'Connected', severity: 'success'},
  {label: 'Connecting', severity: 'warning'},
  {label: 'Disconnected', severity: 'danger'},
  {label: 'Not Monitored', severity: 'secondary'}
]

const statusSeverity = computed(() => {
  switch (props.connectionStatus) {
    case 'connected':
      return 'success'
    case 'disconnected':
      return 'danger'
    case 'error':
      return 'danger'
    default:
      return 'warning'
  }
})

const statusIcon = computed(() => {
  switch (props.connectionStatus) {
    case 'connected':
      return 'pi pi-check-circle'
    case 'disconnected':
      return 'pi pi-times-circle'
    case 'error':
      return 'pi pi-exclamation-circle'
    default:
      return 'pi pi-spinner pi-spin'
  }
})

const statusText = computed(() => {
  switch (props.connectionStatus) {
    case 'connected':
      return 'Connected'
    case 'disconnected':
      return 'Disconnected'
    case 'error':
      return 'Error'
    default:
      return 'Connecting...'
  }
})

onMounted(() => {
  initMap()
})

watch(() => props.nodesByCountry, (newVal) => {
  updateMarkers()
}, {deep: true})

watch(() => props.countryCoordinates, (newVal) => {
}, {deep: true})

watch(() => props.selectedNodeId, (nodeId) => {
  if (nodeId && markers.value[nodeId]) {
    flyToNode(nodeId)
  }
})

const initMap = () => {
  map.value = new maplibregl.Map({
    container: mapContainer.value,
    style: 'https://geoserveis.icgc.cat/contextmaps/icgc_mapa_base_gris_simplificat.json',
    center: [20, 10],
    zoom: 2
  })

  map.value.addControl(new maplibregl.NavigationControl())
  map.value.addControl(new maplibregl.FullscreenControl())

  map.value.on('load', () => {
    console.log('🗺️ Map loaded')
    updateMarkers()
  })
}

const updateMarkers = () => {
  // Clear existing markers
  Object.values(markers.value).forEach(({marker}) => {
    marker.remove()
  })
  markers.value = {}

  // Create markers for each node at its country's center
  Object.entries(props.nodesByCountry).forEach(([countryCode, nodes]) => {
    const centerPoint = props.countryCoordinates[countryCode]

    if (!centerPoint) {
      console.warn(`⚠️ No center point for country: ${countryCode}`)
      return
    }

    // Create a marker for each node at the country center
    nodes.forEach((node) => {
      createMarker(node, centerPoint)
    })
  })
}

const createMarker = (node, coords) => {
  const el = document.createElement('div')
  el.className = 'marker'

  // Set styles inline - MapLibre works better with inline styles
  el.style.width = '30px'
  el.style.height = '30px'
  el.style.borderRadius = '50%'
  el.style.border = '3px solid white'
  el.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.3)'
  el.style.cursor = 'pointer'

  // Don't add inline styles that will conflict with CSS
  updateMarkerStyle(el, node)

  const marker = new maplibregl.Marker({element: el})
      .setLngLat(coords)
      .addTo(map.value)

  // Click handler
  el.addEventListener('click', (e) => {
    e.stopPropagation()
    showPopup(node, coords)
    emit('node-click', node.id)
  })

  markers.value[node.id] = {marker, element: el, coords}
}

const updateMarkerStyle = (element, node) => {
  let color
  if (!node.is_monitored) {
    color = '#9ca3af' // gray
  } else if (node.is_connected) {
    color = '#22c55e' // green
  } else if (node.state === 'connecting') {
    color = '#eab308' // yellow
  } else {
    color = '#ef4444' // red
  }

  element.style.backgroundColor = color
}

const showPopup = (node, coords) => {
  const isMonitored = node.is_monitored
  const isConnected = node.is_connected

  const severityClass = isMonitored
      ? isConnected
          ? 'success'
          : 'danger'
      : 'secondary'

  let actionsHTML = ''
  if (isMonitored) {
    if (isConnected) {
      actionsHTML = `
        <button class="p-button p-button-danger p-button-sm" onclick="window.handleMQTTAction('stop', ${node.id})">
          <i class="pi pi-stop-circle"></i>
          <span>Stop</span>
        </button>
        <button class="p-button p-button-warning p-button-sm" onclick="window.handleMQTTAction('restart', ${node.id})">
          <i class="pi pi-refresh"></i>
          <span>Restart</span>
        </button>
      `
    } else {
      actionsHTML = `
        <button class="p-button p-button-success p-button-sm" onclick="window.handleMQTTAction('start', ${node.id})">
          <i class="pi pi-play"></i>
          <span>Start</span>
        </button>
        <button class="p-button p-button-warning p-button-sm" onclick="window.handleMQTTAction('restart', ${node.id})">
          <i class="pi pi-refresh"></i>
          <span>Restart</span>
        </button>
      `
    }
  } else {
    actionsHTML = `
      <button class="p-button p-button-success p-button-sm" onclick="window.handleMQTTAction('start', ${node.id})">
        <i class="pi pi-play"></i>
        <span>Start Monitoring</span>
      </button>
    `
  }

  // Format last message time
  let lastMessageHTML = ''
  if (isMonitored && node.last_message_time) {
    const relativeTime = formatRelativeTime(node.last_message_time)
    lastMessageHTML = `
      <div class="info-row">
        <i class="pi pi-clock"></i>
        <label>Last Message:</label>
        <span class="p-badge p-badge-info">${relativeTime}</span>
      </div>
    `
  } else if (isMonitored) {
    lastMessageHTML = `
      <div class="info-row">
        <i class="pi pi-clock"></i>
        <label>Last Message:</label>
        <span class="p-badge p-badge-secondary">No messages yet</span>
      </div>
    `
  }

  const popup = new maplibregl.Popup({closeButton: true, className: 'prime-popup'})
      .setLngLat(coords)
      .setHTML(
          `
      <div class="p-card">
        <div class="popup-header">
          <span class="p-badge p-badge-${severityClass}">${isMonitored ? node.state : 'inactive'}</span>
          <h3>${node.name}</h3>
        </div>

        <div class="popup-body">
          <div class="info-row">
            <i class="pi pi-globe"></i>
            <label>Country:</label>
            <span>${node.country}</span>
          </div>
          <div class="info-row">
            <i class="pi pi-id-card"></i>
            <label>Centre ID:</label>
            <span>${node.centre_id || 'N/A'}</span>
          </div>
          ${
              isMonitored
                  ? `
            <div class="info-row">
              <i class="pi pi-info-circle"></i>
              <label>Status:</label>
              <span class="p-badge p-badge-${severityClass}">${node.state}</span>
            </div>
            <div class="info-row">
              <i class="pi pi-envelope"></i>
              <label>Messages:</label>
              <span class="p-chip p-chip-sm">${node.message_count || 0}</span>
            </div>
            <div class="info-row">
              <i class="pi pi-rss"></i>
              <label>Subscriptions:</label>
              <span class="p-chip p-chip-sm">${node.subscription_count || 0}</span>
            </div>
            ${lastMessageHTML}
          `
                  : `
            <div class="info-row">
              <i class="pi pi-info-circle"></i>
              <label>Status:</label>
              <span class="p-badge p-badge-secondary">Not monitored</span>
            </div>
          `
          }
        </div>

        <div class="popup-actions">
          ${actionsHTML}
        </div>
      </div>
    `
      )
      .addTo(map.value)
}

const flyToNode = (nodeId) => {
  if (markers.value[nodeId]) {
    const {coords} = markers.value[nodeId]
    map.value.flyTo({center: coords, zoom: 6})
  }
}

const pulseMarker = (nodeId) => {
  if (markers.value[nodeId]) {
    const {element} = markers.value[nodeId]
    element.classList.add('pulse')
    setTimeout(() => element.classList.remove('pulse'), 2000)
  }
}

const showNotif = (message) => {
  notificationMessage.value = message
  showNotification.value = true
  setTimeout(() => {
    showNotification.value = false
  }, 3000)
}

const formatRelativeTime = (timestamp) => {
  if (!timestamp) return 'Never'

  const now = Date.now()
  const messageTime = new Date(timestamp).getTime()
  const diffMs = now - messageTime
  const diffSec = Math.floor(diffMs / 1000)
  const diffMin = Math.floor(diffSec / 60)
  const diffHour = Math.floor(diffMin / 60)
  const diffDay = Math.floor(diffHour / 24)

  if (diffSec < 30) {
    return 'Just now'
  } else if (diffSec < 60) {
    return `${diffSec}s ago`
  } else if (diffMin < 60) {
    return `${diffMin}m ago`
  } else if (diffHour < 24) {
    return `${diffHour}h ago`
  } else if (diffDay === 1) {
    return 'Yesterday'
  } else if (diffDay < 7) {
    return `${diffDay} days ago`
  } else {
    return new Date(timestamp).toLocaleDateString()
  }
}

defineExpose({
  pulseMarker,
  showNotif,
  flyToNode
})

if (typeof window !== 'undefined') {
  window.handleMQTTAction = (action, nodeId) => {
    emit('action', {action, nodeId})
  }
}
</script>

<style scoped>
.map-container {
  flex: 1;
  position: relative;
  height: 100%;
}

.map {
  width: 100%;
  height: 100%;
}

.ws-status {
  position: absolute;
  top: 10px;
  right: 10px;
  z-index: 1000;
  min-width: 150px;
}

.ws-status :deep(.p-card-body) {
  padding: 0.75rem;
}

.ws-status :deep(.p-card-content) {
  padding: 0;
}

.status-content {
  display: flex;
  align-items: center;
  justify-content: center;
}

.status-content :deep(.p-badge) {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  padding: 0.5rem 0.75rem;
}

.legend {
  position: absolute;
  bottom: 30px;
  left: 10px;
  z-index: 1000;
  min-width: 200px;
}

.legend :deep(.p-card-body) {
  padding: 1rem;
}

.legend-title {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 600;
  font-size: 0.95rem;
  padding: 0.75rem 1rem;
  border-bottom: 1px solid var(--surface-border);
}

.legend-items {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.legend-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-size: 0.875rem;
}

.notification {
  position: absolute;
  top: 70px;
  right: 10px;
  z-index: 1000;
  min-width: 300px;
  animation: slideInRight 0.3s ease-out;
}

@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.marker {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  border: 3px solid white;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  cursor: pointer;
  transition: box-shadow 0.3s, filter 0.3s;
}

/* Use filter and box-shadow for hover effect - they don't affect positioning */
.marker:hover {
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.5);
  filter: brightness(1.1);
}

.marker.pulse {
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%,
  100% {
    opacity: 1;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }
  50% {
    opacity: 0.6;
    box-shadow: 0 2px 20px rgba(0, 0, 0, 0.6);
  }
}


:deep(.prime-popup .maplibregl-popup-content) {
  padding: 0;
  border-radius: var(--border-radius);
  overflow: hidden;
}

:deep(.prime-popup .p-card) {
  border: none;
  box-shadow: none;
}

:deep(.popup-header) {
  padding: 1rem;
  border-bottom: 1px solid var(--surface-border);
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

:deep(.popup-header h3) {
  margin: 0;
  font-size: 1.1rem;
  font-weight: 600;
}

:deep(.popup-body) {
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

:deep(.info-row) {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
}

:deep(.info-row i) {
  color: var(--primary-color);
  width: 20px;
}

:deep(.info-row label) {
  font-weight: 600;
  color: var(--text-color-secondary);
  min-width: 100px;
}

:deep(.popup-actions) {
  padding: 1rem;
  border-top: 1px solid var(--surface-border);
  display: flex;
  gap: 0.5rem;
}

:deep(.popup-actions .p-button) {
  flex: 1;
}
</style>


================================================
FILE: src/composables/useMapNodes.js
================================================
import {computed, ref} from 'vue'

export function useMapNodes() {
    const allNodes = ref([])
    const monitoredNodes = ref({})
    const nodesByCountry = ref({})
    const countryCoordinates = ref({})
    const selectedNodeId = ref(null)
    const currentFilter = ref('all')

    const stats = computed(() => ({
        totalNodes: allNodes.value.length,
        connectedNodes: Object.values(monitoredNodes.value).filter(n => n.is_connected).length,
        totalMessages: Object.values(monitoredNodes.value).reduce((sum, n) => sum + (n.message_count || 0), 0),
        totalSubscriptions: Object.values(monitoredNodes.value).reduce((sum, n) => sum + (n.subscription_count || 0), 0)
    }))

    const filteredNodes = computed(() => {
        return allNodes.value
            .map(node => {
                // Merge node data with monitoring status
                const monitored = monitoredNodes.value[node.id]
                return {
                    ...node,
                    ...monitored,
                    is_monitored: !!monitored
                }
            })
            .filter(node => {
                switch (currentFilter.value) {
                    case 'connected':
                        return node.is_monitored && node.is_connected
                    case 'disconnected':
                        return node.is_monitored && !node.is_connected
                    case 'inactive':
                        return !node.is_monitored
                    default:
                        return true
                }
            })
    })

    const fetchNodes = async () => {
        try {
            const response = await fetch('/api/mqtt-nodes/')
            allNodes.value = await response.json()
            processNodes()
        } catch (error) {
            console.error('Error fetching nodes:', error)
        }
    }

    const updateMonitoredNodes = (statusData) => {
        monitoredNodes.value = {}

        if (statusData.clients) {
            statusData.clients.forEach(client => {
                monitoredNodes.value[client.node_id] = client
            })
        }

        processNodes()
    }

    const processNodes = () => {
        nodesByCountry.value = {}
        countryCoordinates.value = {}

        allNodes.value.forEach(node => {
            const monitored = monitoredNodes.value[node.id]
            const nodeInfo = {
                ...node,
                ...monitored,
                is_monitored: !!monitored
            }

            // Store country center point
            if (node.center_point && !countryCoordinates.value[node.country_code]) {
                countryCoordinates.value[node.country_code] = node.center_point
            }

            // Group by country
            if (!nodesByCountry.value[node.country_code]) {
                nodesByCountry.value[node.country_code] = []
            }
            nodesByCountry.value[node.country_code].push(nodeInfo)
        })

    }

    const getNodeInfo = (nodeId) => {
        const node = allNodes.value.find(n => n.id === nodeId)
        if (!node) return null

        const monitored = monitoredNodes.value[nodeId]
        return {
            ...node,
            ...monitored,
            is_monitored: !!monitored
        }
    }

    const setFilter = (filter) => {
        currentFilter.value = filter
    }

    const selectNode = (nodeId) => {
        selectedNodeId.value = nodeId
    }

    return {
        allNodes,
        monitoredNodes,
        nodesByCountry,
        countryCoordinates,
        selectedNodeId,
        currentFilter,
        stats,
        filteredNodes,
        fetchNodes,
        updateMonitoredNodes,
        getNodeInfo,
        setFilter,
        selectNode
    }
}


================================================
FILE: src/composables/useWebSocket.js
================================================
import {onMounted, onUnmounted, ref} from 'vue'

export function useWebSocket() {
    const ws = ref(null)
    const isConnected = ref(false)
    const connectionStatus = ref('disconnected')
    const messageHandlers = ref([])

    const connect = () => {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:'
        const wsUrl = `${protocol}//${window.location.host}/ws/mqtt-status/`

        ws.value = new WebSocket(wsUrl)

        ws.value.onopen = () => {
            isConnected.value = true
            connectionStatus.value = 'connected'
            console.log('WebSocket connected')
        }

        ws.value.onmessage = (event) => {
            const message = JSON.parse(event.data)
            messageHandlers.value.forEach(handler => handler(message))
        }

        ws.value.onclose = () => {
            isConnected.value = false
            connectionStatus.value = 'disconnected'
            console.log('WebSocket disconnected, reconnecting...')
            setTimeout(connect, 3000)
        }

        ws.value.onerror = (error) => {
            connectionStatus.value = 'error'
            console.error('WebSocket error:', error)
        }
    }

    const disconnect = () => {
        if (ws.value) {
            ws.value.close()
        }
    }

    const sendMessage = (data) => {
        if (ws.value && isConnected.value) {
            ws.value.send(JSON.stringify(data))
        }
    }

    const onMessage = (handler) => {
        messageHandlers.value.push(handler)
    }

    onMounted(() => {
        connect()
    })

    onUnmounted(() => {
        disconnect()
    })

    return {
        isConnected,
        connectionStatus,
        sendMessage,
        onMessage
    }
}

